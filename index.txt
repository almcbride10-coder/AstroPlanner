<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AstroPlanner</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@700&family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            -webkit-tap-highlight-color: transparent;
        }
        .font-orbitron {
            font-family: 'Orbitron', sans-serif;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .event-card, .modal-content, .seeing-card {
            animation: fadeIn 0.5s ease-out forwards;
        }
        .equipment-radio:checked + label, .date-mode-radio:checked + label {
            background-color: #4f46e5;
            border-color: #4f46e5;
            color: #ffffff;
        }
        .number-input-button {
            width: 2.5rem;
            height: 2.5rem;
            font-size: 1.5rem;
            line-height: 1;
        }
        .eyepiece-tag {
            animation: fadeIn 0.3s ease;
        }
        .event-icon {
            width: 100px;
            height: 100px;
        }
        input[type="date"]::-webkit-calendar-picker-indicator {
            cursor: pointer;
            filter: invert(1) brightness(0.9);
        }


        /* --- Night Mode Styles --- */
        .night-mode-red, .night-mode-green { background-color: #000 !important; }
        
        /* Red Mode */
        .night-mode-red .bg-gray-800, .night-mode-red .bg-gray-900\/80, .night-mode-red .bg-gray-700, .night-mode-red .bg-gray-600, .night-mode-red .bg-gray-700\/50, .night-mode-red .bg-gray-800\/50 { background-color: #1c0000 !important; }
        .night-mode-red .text-white, .night-mode-red .text-gray-200, .night-mode-red .text-gray-300, .night-mode-red .text-gray-400 { color: #ff5555 !important; }
        .night-mode-red .border-gray-700, .night-mode-red .border-gray-600, .night-mode-red .border-gray-500 { border-color: #600 !important; }
        .night-mode-red .text-indigo-400, .night-mode-red .text-indigo-300 { color: #ff8888 !important; }
        .night-mode-red input, .night-mode-red select { filter: hue-rotate(270deg) saturate(0.8) brightness(0.7); }
        .night-mode-red .equipment-radio:checked + label, .night-mode-red .date-mode-radio:checked + label { background-color: #b00 !important; border-color: #f00 !important; color: #000 !important; }
        .night-mode-red .number-input-button, .night-mode-red #add-eyepiece-btn, .night-mode-red #save-telescope-btn, .night-mode-red #select-all-filters-btn, .night-mode-red .gemini-button { background-color: #900 !important; color: #000 !important;}
        .night-mode-red .eyepiece-tag { background-color: #b00 !important; color: #000 !important;}
        .night-mode-red .find-button { background-color: #400 !important; color: #ffaaaa !important; }
        .night-mode-red .find-button:hover { background-color: #600 !important; }
        .night-mode-red #change-location-btn { background-color: #500 !important; }
        .night-mode-red .logo-banner { background-image: none !important; background-color: #111; }
        .night-mode-red .logo-banner h1 { text-shadow: 0 0 10px #f55 !important; }
        .night-mode-red .logo-banner p { color: #ffaaaa !important; }




        /* Green Mode */
        .night-mode-green .bg-gray-800, .night-mode-green .bg-gray-900\/80, .night-mode-green .bg-gray-700, .night-mode-green .bg-gray-600, .night-mode-green .bg-gray-700\/50, .night-mode-green .bg-gray-800\/50 { background-color: #001c00 !important; }
        .night-mode-green .text-white, .night-mode-green .text-gray-200, .night-mode-green .text-gray-300, .night-mode-green .text-gray-400 { color: #55ff55 !important; }
        .night-mode-green .border-gray-700, .night-mode-green .border-gray-600, .night-mode-green .border-gray-500 { border-color: #060 !important; }
        .night-mode-green .text-indigo-400, .night-mode-green .text-indigo-300 { color: #88ff88 !important; }
        .night-mode-green input, .night-mode-green select { filter: hue-rotate(50deg) saturate(0.8) brightness(0.7); }
        .night-mode-green .equipment-radio:checked + label, .night-mode-green .date-mode-radio:checked + label { background-color: #0b0 !important; border-color: #0f0 !important; color: #000 !important; }
        .night-mode-green .number-input-button, .night-mode-green #add-eyepiece-btn, .night-mode-green #save-telescope-btn, .night-mode-green #select-all-filters-btn, .night-mode-green .gemini-button { background-color: #090 !important; color: #000 !important;}
        .night-mode-green .eyepiece-tag { background-color: #0b0 !important; color: #000 !important;}
        .night-mode-green .find-button { background-color: #040 !important; color: #aaffaa !important; }
        .night-mode-green .find-button:hover { background-color: #060 !important; }
        .night-mode-green #change-location-btn { background-color: #050 !important; }
        .night-mode-green .logo-banner { background-image: none !important; background-color: #111; }
        .night-mode-green .logo-banner h1 { text-shadow: 0 0 10px #5f5 !important; }
        .night-mode-green .logo-banner p { color: #aaffaa !important; }




        /* Subdued Icon in Night Mode */
        .night-mode-red .night-mode-subdued-icon, .night-mode-green .night-mode-subdued-icon {
            filter: grayscale(1) brightness(0.7) contrast(2);
            opacity: 0.7;
        }
        
    </style>
</head>
<body class="bg-gray-900 text-gray-200">


    <div id="main-container" class="container mx-auto max-w-lg min-h-screen bg-gray-800 shadow-2xl relative">
        <!-- Header -->
        <header class="bg-gray-900/80 backdrop-blur-sm border-b border-gray-700">
            <div class="logo-banner p-4 rounded-lg" style="background-image: url('https://images.unsplash.com/photo-1534796636912-3b95b3ab5986?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2071&q=80'); background-size: cover; background-position: center;">
                <div class="text-center bg-black/50 p-4 rounded">
                     <h1 class="font-orbitron text-3xl font-bold text-white tracking-wider" style="text-shadow: 0 0 10px #fff, 0 0 20px #4f46e5;">AstroPlanner</h1>
                    <p class="mt-2 text-indigo-300 tracking-wider" style="font-size: 0.75rem;">Visual Astronomy Planning Tool</p>
                    <p class="mt-1 font-bold text-gray-300 tracking-widest uppercase" style="font-size: 0.6rem;">MCBRIDE INDUSTRIES - SPACE DIVISION</p>
                </div>
            </div>
             <div class="p-4">
                <div id="location-container" class="text-sm text-indigo-400 text-center flex items-center justify-center gap-2 mb-3">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-geo-alt-fill" viewBox="0 0 16 16">
                        <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"/>
                    </svg>
                    <span id="location-display">Detecting Location...</span>
                    <button id="change-location-btn" class="text-xs bg-gray-600 hover:bg-gray-500 px-2 py-1 rounded-md transition-colors">[Change]</button>
                </div>
                <!-- Night Vision Controls -->
                <div class="flex justify-center items-center gap-2 text-xs">
                    <span class="font-semibold text-gray-400">Night Vision:</span>
                    <button id="night-mode-off" class="px-3 py-1 bg-gray-600 rounded-md">Off</button>
                    <button id="night-mode-red" class="px-3 py-1 bg-red-900 text-red-300 rounded-md">Red</button>
                    <button id="night-mode-green" class="px-3 py-1 bg-green-900 text-green-300 rounded-md">Green</button>
                </div>
            </div>
        </header>


        <!-- Seeing Conditions -->
        <div class="p-4 border-b border-gray-700">
             <h2 class="text-lg font-semibold mb-3 text-white">Seeing Conditions</h2>
             <div class="grid grid-cols-3 gap-3 text-center">
                <div class="seeing-card bg-gray-700 p-3 rounded-lg flex flex-col justify-between">
                    <div>
                         <p class="text-xs font-semibold mt-1 flex items-center justify-center gap-1">
                            Seeing
                            <a href="https://www.meteoblue.com/en/weather/outdoorsports/seeing" target="_blank" rel="noopener noreferrer" class="text-indigo-400 hover:text-indigo-300">
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"/><path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"/></svg>
                            </a>
                        </p>
                        <span class="text-2xl">✨</span>
                    </div>
                    <select id="seeing-select" class="w-full bg-gray-600 border-gray-500 rounded-md text-white text-sm font-bold p-1 mt-1 text-center">
                        <option value="5">Excellent</option>
                        <option selected value="4">Good</option>
                        <option value="3">Average</option>
                        <option value="2">Poor</option>
                        <option value="1">Very Poor</option>
                    </select>
                </div>
                <div class="seeing-card bg-gray-700 p-3 rounded-lg flex flex-col justify-between">
                    <div>
                         <p class="text-xs font-semibold mt-1 flex items-center justify-center gap-1">
                            Weather
                            <a href="https://clearoutside.com/" target="_blank" rel="noopener noreferrer" class="text-indigo-400 hover:text-indigo-300">
                               <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"/><path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"/></svg>
                            </a>
                        </p>
                        <span class="text-2xl">☀️</span>
                    </div>
                     <select id="weather-select" class="w-full bg-gray-600 border-gray-500 rounded-md text-white text-sm font-bold p-1 mt-1 text-center">
                        <option selected value="clear">Clear</option>
                        <option value="hazy">Hazy</option>
                        <option value="partly_cloudy">Partly Cloudy</option>
                        <option value="cloudy">Cloudy</option>
                    </select>
                </div>
                 <div class="seeing-card bg-gray-700 p-3 rounded-lg flex flex-col justify-between">
                    <div>
                         <p class="text-xs font-semibold mt-1 flex items-center justify-center gap-1">
                            Light Pollution
                             <a href="https://www.lightpollutionmap.info/" target="_blank" rel="noopener noreferrer" class="text-indigo-400 hover:text-indigo-300">
                               <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"/><path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"/></svg>
                            </a>
                        </p>
                        <span class="text-2xl">💡</span>
                    </div>
                    <select id="bortle-scale-select" class="w-full bg-gray-600 border-gray-500 rounded-md text-white text-sm font-bold p-1 mt-1 text-center">
                        <option value="1">Bortle 1</option>
                        <option value="2">Bortle 2</option>
                        <option value="3">Bortle 3</option>
                        <option value="4">Bortle 4</option>
                        <option selected value="5">Bortle 5</option>
                        <option value="6">Bortle 6</option>
                        <option value="7">Bortle 7</option>
                        <option value="8">Bortle 8</option>
                        <option value="9">Bortle 9</option>
                    </select>
                </div>
             </div>
        </div>
        
        <!-- Date Filter -->
        <div class="p-4 border-b border-gray-700">
            <h2 class="text-lg font-semibold mb-3 text-white">Date Range</h2>
            <div id="date-filter-mode" class="grid grid-cols-3 gap-3 mb-3">
                <div>
                    <input type="radio" name="date_mode" value="day" id="date_mode_day" class="sr-only date-mode-radio" checked>
                    <label for="date_mode_day" class="block p-2 border-2 border-gray-600 rounded-lg cursor-pointer text-center text-sm font-medium">Day</label>
                </div>
                <div>
                    <input type="radio" name="date_mode" value="week" id="date_mode_week" class="sr-only date-mode-radio">
                    <label for="date_mode_week" class="block p-2 border-2 border-gray-600 rounded-lg cursor-pointer text-center text-sm font-medium">Week Ahead</label>
                </div>
                <div>
                    <input type="radio" name="date_mode" value="month" id="date_mode_month" class="sr-only date-mode-radio">
                    <label for="date_mode_month" class="block p-2 border-2 border-gray-600 rounded-lg cursor-pointer text-center text-sm font-medium">Month Ahead</label>
                </div>
            </div>
            <div id="date-picker-container">
                 <label for="date-picker" class="block text-sm font-medium text-gray-400 mb-1">Select a specific date:</label>
                 <input type="date" id="date-picker" class="w-full bg-gray-700 border-gray-600 rounded-md text-white px-3 py-2">
            </div>
        </div>




        <!-- Equipment Selector -->
        <div class="p-4 border-b border-gray-700">
            <h2 class="text-lg font-semibold mb-3 text-white">My Equipment</h2>
            <form id="equipment-form" class="grid grid-cols-2 gap-3 text-center">
                <div>
                    <input type="radio" name="equipment" value="naked_eye" id="naked_eye" class="sr-only equipment-radio">
                    <label for="naked_eye" class="block p-3 border-2 border-gray-600 rounded-lg cursor-pointer transition-all duration-200 hover:border-indigo-500">
                        <span class="text-2xl">👁️</span>
                        <span class="block text-sm font-medium mt-1">Naked Eye</span>
                    </label>
                </div>
                <div>
                    <input type="radio" name="equipment" value="telescope" id="telescope" class="sr-only equipment-radio" checked>
                    <label for="telescope" id="telescope-label" class="block p-3 border-2 border-gray-600 rounded-lg cursor-pointer transition-all duration-200 hover:border-indigo-500">
                        <span class="text-2xl">🌌</span>
                        <span id="telescope-label-text" class="block text-sm font-medium mt-1">Telescope</span>
                    </label>
                </div>
            </form>
        </div>


        <!-- Event List -->
        <main id="event-list" class="p-4 space-y-4">
            <!-- Events will be dynamically inserted here -->
        </main>
    </div>


    <!-- Telescope Configuration Modal -->
    <div id="telescope-modal" class="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 z-50 hidden">
        <div class="modal-content bg-gray-800 rounded-xl shadow-2xl w-full max-w-md p-6 border border-gray-700 overflow-y-auto max-h-screen">
            <h3 class="text-2xl font-bold text-white mb-4">Telescope Setup</h3>
            
            <!-- Aperture, Focal Length, etc. -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-300 mb-2">Aperture (mm)</label>
                <div class="flex items-center justify-center gap-4 bg-gray-700 p-2 rounded-lg">
                    <button id="aperture-minus" class="number-input-button bg-indigo-600 text-white rounded-md font-bold">-</button>
                    <span id="aperture-value" class="text-2xl font-semibold text-white w-24 text-center">150mm</span>
                    <button id="aperture-plus" class="number-input-button bg-indigo-600 text-white rounded-md font-bold">+</button>
                </div>
            </div>
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-300 mb-2">Focal Length (mm)</label>
                <div class="flex items-center justify-center gap-4 bg-gray-700 p-2 rounded-lg">
                    <button id="focal-length-minus" class="number-input-button bg-indigo-600 text-white rounded-md font-bold">-</button>
                    <span id="focal-length-value" class="text-2xl font-semibold text-white w-24 text-center">1000mm</span>
                    <button id="focal-length-plus" class="number-input-button bg-indigo-600 text-white rounded-md font-bold">+</button>
                </div>
            </div>
            <div class="mb-6">
                <label for="eyepiece-input" class="block text-sm font-medium text-gray-300 mb-2">My Eyepieces (4-35mm)</label>
                <div class="flex gap-2">
                    <input type="number" id="eyepiece-input" min="4" max="35" placeholder="e.g., 25" class="w-full bg-gray-700 border-gray-600 rounded-md text-white px-3 py-2">
                    <button id="add-eyepiece-btn" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 rounded-md text-white font-semibold">Add</button>
                </div>
                <div id="eyepiece-list" class="flex flex-wrap gap-2 mt-3"></div>
            </div>
            <div class="mb-6">
                 <div class="flex justify-between items-center mb-2">
                    <label class="block text-sm font-medium text-gray-300">My Filters</label>
                    <button id="select-all-filters-btn" class="text-xs bg-indigo-600/50 hover:bg-indigo-600 px-2 py-1 rounded-md transition-colors">Select All</button>
                </div>
                <div id="filters" class="grid grid-cols-3 sm:grid-cols-4 gap-2 text-sm">
                     <label class="flex items-center space-x-2 bg-gray-700 p-2 rounded-md"><input type="checkbox" value="moon" class="form-checkbox h-4 w-4 text-indigo-600 bg-gray-900 border-gray-600 rounded"><span>Moon</span></label>
                     <label class="flex items-center space-x-2 bg-gray-700 p-2 rounded-md"><input type="checkbox" value="uhc" class="form-checkbox h-4 w-4 text-indigo-600 bg-gray-900 border-gray-600 rounded"><span>UHC</span></label>
                     <label class="flex items-center space-x-2 bg-gray-700 p-2 rounded-md"><input type="checkbox" value="oiii" class="form-checkbox h-4 w-4 text-indigo-600 bg-gray-900 border-gray-600 rounded"><span>O-III</span></label>
                     <label class="flex items-center space-x-2 bg-gray-700 p-2 rounded-md"><input type="checkbox" value="red" class="form-checkbox h-4 w-4 text-indigo-600 bg-gray-900 border-gray-600 rounded"><span>Red</span></label>
                     <label class="flex items-center space-x-2 bg-gray-700 p-2 rounded-md"><input type="checkbox" value="green" class="form-checkbox h-4 w-4 text-indigo-600 bg-gray-900 border-gray-600 rounded"><span>Green</span></label>
                     <label class="flex items-center space-x-2 bg-gray-700 p-2 rounded-md"><input type="checkbox" value="blue" class="form-checkbox h-4 w-4 text-indigo-600 bg-gray-900 border-gray-600 rounded"><span>Blue</span></label>
                     <label class="flex items-center space-x-2 bg-gray-700 p-2 rounded-md"><input type="checkbox" value="yellow" class="form-checkbox h-4 w-4 text-indigo-600 bg-gray-900 border-gray-600 rounded"><span>Yellow</span></label>
                </div>
            </div>
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-300 mb-2">My Barlow Lenses</label>
                <div id="barlows" class="grid grid-cols-3 sm:grid-cols-4 gap-2 text-sm">
                     <label class="flex items-center space-x-2 bg-gray-700 p-2 rounded-md"><input type="checkbox" value="2" class="form-checkbox h-4 w-4 text-indigo-600 bg-gray-900 border-gray-600 rounded"><span>2x</span></label>
                     <label class="flex items-center space-x-2 bg-gray-700 p-2 rounded-md"><input type="checkbox" value="3" class="form-checkbox h-4 w-4 text-indigo-600 bg-gray-900 border-gray-600 rounded"><span>3x</span></label>
                     <label class="flex items-center space-x-2 bg-gray-700 p-2 rounded-md"><input type="checkbox" value="5" class="form-checkbox h-4 w-4 text-indigo-600 bg-gray-900 border-gray-600 rounded"><span>5x</span></label>
                </div>
            </div>


            <div class="flex justify-end gap-3">
                <button id="close-modal-btn" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 rounded-md text-white font-semibold transition-colors">Cancel</button>
                <button id="save-telescope-btn" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 rounded-md text-white font-semibold transition-colors">Save & Apply</button>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- DATA ---
            const celestialDatabase = [
                { name: "Mars", astroHopperQuery: "Mars", type: "planet", visibility: [1, 2, 3, 11, 12], minBortle: 9, riseTime: "10:30 PM", setTime: "11:00 AM", riseDirection: "E", setDirection: "W", description: "The Red Planet may show polar caps and dark surface features in telescopes at opposition.", peakTime: "Around Midnight", direction: "In Taurus (Winter)", minEquipment: "telescope", minAperture: 80, recommendedMagnification: [100, 250], recommendedFilters: ["red", "blue"] },
                { name: "Jupiter", astroHopperQuery: "Jupiter", type: "planet", visibility: [1, 2, 7, 8, 9, 10, 11, 12], minBortle: 9, riseTime: "07:00 PM", setTime: "07:30 AM", riseDirection: "E", setDirection: "W", description: "The largest planet, showing cloud bands and its four largest moons.", peakTime: "Varies", direction: "In Pisces (Autumn)", minEquipment: "naked_eye", minAperture: 70, recommendedMagnification: [100, 180], recommendedFilters: ["moon", "blue"] },
                { name: "Saturn", astroHopperQuery: "Saturn", type: "planet", visibility: [6, 7, 8, 9, 10, 11, 12], minBortle: 9, riseTime: "06:00 PM", setTime: "06:00 AM", riseDirection: "SE", setDirection: "SW", description: "Famous for its stunning ring system, visible in any small telescope.", peakTime: "Varies", direction: "In Aquarius (Late Summer/Autumn)", minEquipment: "telescope", minAperture: 60, recommendedMagnification: [100, 200], recommendedFilters: ["yellow"] },
                { name: "Uranus", astroHopperQuery: "Uranus", type: "planet", visibility: [8, 9, 10, 11, 12, 1, 2], minBortle: 6, riseTime: "08:00 PM", setTime: "09:00 AM", riseDirection: "E", setDirection: "W", description: "The ice giant appears as a small, pale blue-green disk.", peakTime: "Around Midnight", direction: "In Taurus", minEquipment: "telescope", minAperture: 100, recommendedMagnification: [150, 250], recommendedFilters: ["green"] },
                { name: "Neptune", astroHopperQuery: "Neptune", type: "planet", visibility: [7, 8, 9, 10, 11], minBortle: 5, riseTime: "06:30 PM", setTime: "05:30 AM", riseDirection: "SE", setDirection: "SW", description: "The blue giant appears as a tiny blue dot.", peakTime: "Around Midnight", direction: "In Aquarius", minEquipment: "telescope", minAperture: 150, recommendedMagnification: [200, 300], recommendedFilters: [] },
                { name: "Saturn at Opposition", astroHopperQuery: "Saturn", type: "planet", date: "2025-09-08", minBortle: 9, description: "The ringed planet is at its closest and brightest for the year.", peakTime: "12:00 AM", direction: "Rises East, visible all night", minEquipment: "telescope" },
                { name: "Draconids Meteor Shower", type: "meteor_shower", date: "2025-10-07", minBortle: 6, description: "A minor meteor shower (~10 meteors/hour). Best viewed in the early evening.", peakTime: "9:00 PM", direction: "Radiant in Draco (North)", minEquipment: "naked_eye" },
                { name: "Geminids Meteor Shower", type: "meteor_shower", date: "2025-12-14", minBortle: 6, description: "One of the best meteor showers, with up to 120 multicolored meteors per hour.", peakTime: "2:00 AM", direction: "Radiant in Gemini (South-East)", minEquipment: "naked_eye" },
                { name: "Pleiades Star Cluster (M45)", astroHopperQuery: "M45", type: "dso", visibility: [1, 2, 3, 4, 10, 11, 12], minBortle: 7, description: "Known as the Seven Sisters, this is a stunning open star cluster.", peakTime: "11:00 PM", direction: "In Taurus", minEquipment: "naked_eye", minAperture: 50, recommendedMagnification: [25, 60], recommendedFilters: [] },
                { name: "Orion Nebula (M42)", astroHopperQuery: "M42", type: "dso", visibility: [1, 2, 3, 11, 12], minBortle: 6, description: "One of the brightest nebulae, visible as a fuzzy patch in Orion's sword.", peakTime: "Midnight", direction: "In Orion", minEquipment: "naked_eye", minAperture: 70, recommendedMagnification: [50, 100], recommendedFilters: ["uhc", "oiii"] },
                { name: "Andromeda Galaxy (M31)", astroHopperQuery: "M31", type: "dso", visibility: [8, 9, 10, 11, 12, 1], minBortle: 5, description: "The closest major galaxy. Visible as a faint smudge in dark skies.", peakTime: "10:00 PM", direction: "In Andromeda", minEquipment: "naked_eye", minAperture: 80, recommendedMagnification: [40, 80], recommendedFilters: [] },
                { name: "Hercules Cluster (M13)", astroHopperQuery: "M13", type: "dso", visibility: [5, 6, 7, 8, 9], minBortle: 5, description: "A magnificent globular cluster containing hundreds of thousands of stars.", peakTime: "10:00 PM", direction: "In Hercules", minEquipment: "naked_eye", minAperture: 100, recommendedMagnification: [80, 150], recommendedFilters: [] },
                { name: "Ring Nebula (M57)", astroHopperQuery: "M57", type: "dso", visibility: [6, 7, 8, 9, 10], minBortle: 4, description: "A famous planetary nebula that looks like a celestial smoke ring.", peakTime: "11:00 PM", direction: "In Lyra", minEquipment: "telescope", minAperture: 100, recommendedMagnification: [100, 200], recommendedFilters: ["oiii", "uhc"] },
                { name: "Bode's & Cigar Galaxies (M81/M82)", astroHopperQuery: "M81", type: "dso", visibility: [1,2,3,4,5,6,7,8,9,10,11,12], minBortle: 4, description: "A stunning pair of galaxies in Ursa Major.", peakTime: "All Night", direction: "In Ursa Major", minEquipment: "telescope", minAperture: 150, recommendedMagnification: [70, 120], recommendedFilters: [] },
            ];


            // --- STATE & ELEMENTS ---
            let userConfiguration = { equipment: 'telescope', telescope: { aperture: 150, focalLength: 1000, eyepieces: [25, 10], filters: [], barlows: [] }, nightMode: 'off' };
            const equipmentLevels = { naked_eye: 0, telescope: 2 };
            const mainContainer = document.getElementById('main-container');
            const eventList = document.getElementById('event-list');
            const equipmentForm = document.getElementById('equipment-form');
            const datePicker = document.getElementById('date-picker');
            const datePickerContainer = document.getElementById('date-picker-container');
            const dateFilterMode = document.getElementById('date-filter-mode');
            const locationDisplay = document.getElementById('location-display');
            const changeLocationBtn = document.getElementById('change-location-btn');
            const telescopeModal = document.getElementById('telescope-modal');
            const telescopeLabel = document.getElementById('telescope-label');
            const saveTelescopeBtn = document.getElementById('save-telescope-btn');
            const closeModalBtn = document.getElementById('close-modal-btn');
            const apertureValue = document.getElementById('aperture-value');
            const focalLengthValue = document.getElementById('focal-length-value');
            const eyepieceInput = document.getElementById('eyepiece-input');
            const addEyepieceBtn = document.getElementById('add-eyepiece-btn');
            const eyepieceList = document.getElementById('eyepiece-list');
            const selectAllFiltersBtn = document.getElementById('select-all-filters-btn');
            const bortleSelect = document.getElementById('bortle-scale-select');


            // --- FUNCTION DEFINITIONS ---


            function updateLocationDisplay(name) {
                locationDisplay.textContent = name;
            }


            async function getLocation() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(async (position) => {
                        const { latitude, longitude } = position.coords;
                        try {
                            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`);
                            const data = await response.json();
                            const locationName = data.address.city || data.address.town || data.address.village || 'Current Location';
                            updateLocationDisplay(locationName);
                        } catch (error) {
                            console.error("Reverse geocoding failed:", error);
                            updateLocationDisplay("Couldn't fetch city");
                        }
                    }, () => {
                        updateLocationDisplay("Wells, England"); // Fallback
                    });
                } else {
                    updateLocationDisplay("Wells, England"); // Fallback
                }
            }


            function handleManualLocationChange() {
                const newLocation = prompt("Enter a city name:", "London, UK");
                if (newLocation && newLocation.trim() !== "") {
                    updateLocationDisplay(newLocation.trim());
                }
            }
            
            function getMoonPhase(d) {
                const JULIAN_CYCLE = 29.530588853;
                const an = new Date(2000, 0, 6);
                const dif = (d.getTime() - an.getTime()) / 86400000;
                const age = dif % JULIAN_CYCLE;
                const phaseValue = age / JULIAN_CYCLE;
                const illumination = 0.5 * (1 - Math.cos(2 * Math.PI * phaseValue));
                let riseTime = "06:00 PM", setTime = "06:00 AM", riseDirection = "E", setDirection = "W";
                if (age < 1.84) return { name: "New Moon", desc: "The Moon is aligned with the Sun and is not visible.", illumination, age, phaseValue, riseTime: "06:00 AM", setTime: "06:00 PM", riseDirection, setDirection };
                if (phaseValue < 0.5) { riseTime = "Noon"; setTime = "Midnight"; } else { riseTime = "Midnight"; setTime = "Noon"; }
                if (Math.abs(phaseValue - 0.5) < 0.05) { riseTime = "06:00 PM"; setTime = "06:00 AM"; }
                const phases = [
                    {age: 5.53, name: "Waxing Crescent", desc: "A sliver of the Moon is visible in the west after sunset."},
                    {age: 9.22, name: "First Quarter", desc: "The right half of the Moon is illuminated, visible in the evening."},
                    {age: 12.91, name: "Waxing Gibbous", desc: "More than half of the Moon is illuminated, setting after midnight."},
                    {age: 16.61, name: "Full Moon", desc: "The entire face of the Moon is visible all night long."},
                    {age: 20.30, name: "Waning Gibbous", desc: "The Moon rises after sunset, visible late into the night."},
                    {age: 23.99, name: "Last Quarter", desc: "The left half is illuminated, visible in the early morning sky."},
                    {age: 27.68, name: "Waning Crescent", desc: "A sliver of the Moon is visible in the east before sunrise."}
                ];
                for (const phase of phases) { if (age < phase.age) return {...phase, illumination, age, phaseValue, riseTime, setTime, riseDirection, setDirection}; }
                return { name: "New Moon", desc: "The Moon is not visible tonight.", illumination, age, phaseValue, riseTime: "06:00 AM", setTime: "06:00 PM", riseDirection, setDirection };
            }


            function getEventIconSVG(type, name, eventData) {
                const iconClass = 'class="event-icon"';
                let light, dark;
                switch (userConfiguration.nightMode) {
                    case 'red': light = "#ff5555"; dark = "#1c0000"; break;
                    case 'green': light = "#55ff55"; dark = "#001c00"; break;
                    default: light = "#e0e0e0"; dark = "#4a5568"; break;
                }
                if (type === 'moon') {
                    const phase = eventData.phaseValue, R = 45, CX = 50, CY = 50;
                    let svgContent = `<circle cx="${CX}" cy="${CY}" r="${R}" fill="${dark}" />`;
                    if (Math.abs(phase - 0.5) < 0.01) { svgContent = `<circle cx="${CX}" cy="${CY}" r="${R}" fill="${light}" />`; }
                    else if (phase > 0.01 && phase < 0.99) {
                        const rx = R * Math.cos(2 * Math.PI * phase);
                        let path_d;
                        if (phase < 0.5) { const la = phase > 0.25 ? 1 : 0; path_d = `M ${CX},${CY-R} A ${R},${R} 0 ${la},1 ${CX},${CY+R} A ${Math.abs(rx)},${R} 0 ${la},0 ${CX},${CY-R} Z`; } 
                        else { const la = phase < 0.75 ? 1 : 0; path_d = `M ${CX},${CY-R} A ${R},${R} 0 ${la},0 ${CX},${CY+R} A ${Math.abs(rx)},${R} 0 ${la},1 ${CX},${CY-R} Z`; }
                        svgContent += `<path d="${path_d}" fill="${light}" />`;
                    }
                    return `<svg ${iconClass} viewBox="0 0 100 100">${svgContent}</svg>`;
                }
                 switch (type) {
                    case 'planet':
                        if (name.includes('Mars')) { return `<svg ${iconClass} viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><circle cx="50" cy="50" r="30" fill="${light}"/></svg>`; }
                        if (name.includes('Saturn')) { return `<svg ${iconClass} viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M82.5 49.9999C82.5 52.7613 67.91 54.9999 50 54.9999C32.09 54.9999 17.5 52.7613 17.5 49.9999C17.5 47.2385 32.09 44.9999 50 44.9999C67.91 44.9999 82.5 47.2385 82.5 49.9999Z" stroke="${light}" stroke-width="3"/><circle cx="50" cy="50" r="20" fill="${light}"/></svg>`; }
                        if (name.includes('Jupiter')) { return `<svg ${iconClass} viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="50" cy="50" r="30" fill="${light}"/><path d="M25 42H75" stroke="${dark}" stroke-width="4"/><path d="M22 50H78" stroke="${dark}" stroke-width="6"/><path d="M25 58H75" stroke="${dark}" stroke-width="4"/></svg>`; }
                        return `<svg ${iconClass} viewBox="0 0 80 80" xmlns="http://www.w3.org/2000/svg"><circle cx="40" cy="40" r="30" fill="${light}" /></svg>`;
                    case 'dso':
                        if (name.includes('Nebula')) {
                            return `<svg ${iconClass} viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><radialGradient id="g_dso_red"><stop offset="0%" stop-color="#ff8888" /><stop offset="100%" stop-color="#ff5555" /></radialGradient><radialGradient id="g_dso_green"><stop offset="0%" stop-color="#88ff88" /><stop offset="100%" stop-color="#55ff55" /></radialGradient><radialGradient id="g_dso_normal"><stop offset="0%" stop-color="#ff8da1" /><stop offset="100%" stop-color="#3b82f6" /></radialGradient></defs><path d="M50,10 C20,20 20,80 50,90 S 80,80 80,50 S 70,20 50,10" fill="none" stroke="url(#g_dso_${userConfiguration.nightMode === 'off' ? 'normal' : userConfiguration.nightMode})" stroke-width="5" stroke-linecap="round"/></svg>`;
                        }
                        return `<svg ${iconClass} viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M50 35L52.5541 45.4159L62.9701 47.9699L52.5541 50.5238L50 60.9398L47.4459 50.5238L37.0299 47.9699L47.4459 45.4159L50 35Z" fill="${light}"/><path d="M80 65L81.7028 72.2775L88.9803 73.9803L81.7028 75.6831L80 82.9606L78.2972 75.6831L71.0197 73.9803L78.2972 72.2775L80 65Z" fill="${light}" fill-opacity="0.8"/><path d="M25 20L26.7028 27.2775L33.9803 28.9803L26.7028 30.6831L25 37.9606L23.2972 30.6831L16.0197 28.9803L23.2972 27.2775L25 20Z" fill="${light}" fill-opacity="0.7"/></svg>`;
                    case 'meteor_shower':
                        return `<svg ${iconClass} viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.92301 22.0494L13.846 18.1264L19.2307 23.5111L15.3076 27.4341L9.92301 22.0494Z" fill="${light}"/><path d="M15.3845 27.4341L82.1794 94.229L87.564 88.8443L20.7691 22.0494L15.3845 27.4341Z" fill="url(#g_meteor_${userConfiguration.nightMode === 'off' ? 'normal' : userConfiguration.nightMode})"/><defs><linearGradient id="g_meteor_normal" x1="17" y1="24" x2="84" y2="91" gradientUnits="userSpaceOnUse"><stop stop-color="${light}"/><stop offset="1" stop-color="${light}" stop-opacity="0"/></linearGradient><linearGradient id="g_meteor_red" x1="17" y1="24" x2="84" y2="91" gradientUnits="userSpaceOnUse"><stop stop-color="${light}"/><stop offset="1" stop-color="${light}" stop-opacity="0"/></linearGradient><linearGradient id="g_meteor_green" x1="17" y1="24" x2="84" y2="91" gradientUnits="userSpaceOnUse"><stop stop-color="${light}"/><stop offset="1" stop-color="${light}" stop-opacity="0"/></linearGradient></defs></svg>`;
                    default:
                        return `<svg ${iconClass} viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><circle cx="50" cy="50" r="5" fill="${light}"/></svg>`;
                }
            };
            
            function getEquipmentIcon(level) {
                switch (level) { case 'naked_eye': return '👁️'; case 'telescope': return '🌌'; default: return ''; }
            }


            function generateTelescopeRecommendation(event, telescope) {
                if (!event.recommendedMagnification || !telescope) return '';
                let bestSetup = { eyepiece: null, barlow: 1, magnification: 0, diff: Infinity };
                const [minMag, maxMag] = event.recommendedMagnification;
                const idealMag = (minMag + maxMag) / 2;
                const availableMultipliers = [1, ...telescope.barlows];
                availableMultipliers.forEach(barlow => {
                    telescope.eyepieces.forEach(ep => {
                        const mag = Math.round((telescope.focalLength * barlow) / ep);
                        if (mag >= minMag && mag <= maxMag) {
                            const diff = Math.abs(mag - idealMag);
                            if (diff < bestSetup.diff) bestSetup = { eyepiece: ep, barlow, magnification: mag, diff };
                        }
                    });
                });
                if (bestSetup.eyepiece === null && telescope.eyepieces.length > 0) {
                     availableMultipliers.forEach(barlow => {
                        telescope.eyepieces.forEach(ep => {
                            const mag = Math.round((telescope.focalLength * barlow) / ep);
                            const diff = Math.min(Math.abs(mag - minMag), Math.abs(mag - maxMag));
                             if (diff < bestSetup.diff) bestSetup = { eyepiece: ep, barlow, magnification: mag, diff };
                        });
                     });
                }
                const availableFilter = event.recommendedFilters ? event.recommendedFilters.find(f => telescope.filters.includes(f)) : null;
                let recommendationHTML = '<div class="mt-4 pt-3 border-t border-gray-600 text-xs text-gray-400 font-medium">';
                recommendationHTML += '<p class="font-bold mb-1 text-indigo-300">Viewing Suggestion:</p>';
                if (bestSetup.eyepiece) {
                    recommendationHTML += `<span>Use <b>${bestSetup.eyepiece}mm</b> eyepiece`;
                    if (bestSetup.barlow > 1) recommendationHTML += ` with <b>${bestSetup.barlow}x Barlow</b>`;
                    recommendationHTML += ` (~${bestSetup.magnification}x mag)</span>`;
                } else {
                    recommendationHTML += `<span>No ideal eyepiece in your collection.</span>`;
                }
                if (availableFilter) recommendationHTML += ` with <b>${availableFilter.toUpperCase()} filter</b>.`;
                recommendationHTML += '</div>';
                return recommendationHTML;
            }


            function renderEvents() {
                const mode = document.querySelector('input[name="date_mode"]:checked').value;
                const selectedBortle = parseInt(bortleSelect.value);
                let todaysEvents = [];


                if (mode === 'day') {
                    const selectedDate = new Date(datePicker.value + 'T00:00:00');
                    const selectedMonth = selectedDate.getMonth() + 1;
                    const selectedDateString = datePicker.value;


                    const moonPhase = getMoonPhase(selectedDate);
                    if (moonPhase.name !== "New Moon") {
                        todaysEvents.push({ ...moonPhase, type: 'moon', minEquipment: "naked_eye", minBortle: 9, peakTime: "Varies", direction: "Follows E-W path", recommendedFilters: ["moon"] });
                    }


                    celestialDatabase.forEach(event => {
                        const isSpecificEventOnDate = event.date && event.date === selectedDateString;
                        const isSeasonalObjectVisible = !event.date && event.visibility && event.visibility.includes(selectedMonth);
                        if ((isSpecificEventOnDate || isSeasonalObjectVisible) && !(isSeasonalObjectVisible && event.type === 'planet' && todaysEvents.some(e => e.name === event.name))) {
                            todaysEvents.push(event);
                        }
                    });


                } else { // 'week' or 'month'
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    const endDate = new Date(today);
                    endDate.setDate(today.getDate() + (mode === 'week' ? 7 : 30));
                    const currentMonth = today.getMonth() + 1;
                    const nextMonth = (today.getMonth() + 2 > 12) ? 1 : today.getMonth() + 2;


                    celestialDatabase.forEach(event => {
                        if (event.date) {
                            const eventDate = new Date(event.date + 'T00:00:00');
                            if (eventDate >= today && eventDate <= endDate) {
                                todaysEvents.push(event);
                            }
                        } else if (event.visibility && (event.visibility.includes(currentMonth) || event.visibility.includes(nextMonth))) {
                            if (!todaysEvents.some(e => e.name === event.name)) {
                                todaysEvents.push(event);
                            }
                        }
                    });


                    todaysEvents.sort((a, b) => (new Date(a.date) || 0) - (new Date(b.date) || 0));
                }
                
                const filteredEvents = todaysEvents.filter(event => {
                    if (selectedBortle > event.minBortle) return false;
                    const eventLevel = equipmentLevels[event.minEquipment];
                    if (userConfiguration.equipment === 'telescope') return !event.minAperture || userConfiguration.telescope.aperture >= event.minAperture;
                    return eventLevel <= equipmentLevels[userConfiguration.equipment];
                });
                
                eventList.innerHTML = ''; 
                if (filteredEvents.length === 0) {
                    eventList.innerHTML = `<div class="text-center py-10 px-4"><p class="text-lg font-medium text-gray-400">No celestial objects match your criteria.</p><p class="text-sm text-gray-500">Try a different date, equipment, or conditions.</p></div>`;
                    return;
                }


                filteredEvents.forEach(event => {
                    const card = document.createElement('div');
                    card.className = 'event-card bg-gray-700/50 rounded-lg shadow-lg overflow-hidden border border-gray-600';
                    let recommendation = userConfiguration.equipment === 'telescope' ? generateTelescopeRecommendation(event, userConfiguration.telescope) : '';
                    const dateLabel = event.date ? new Date(event.date + 'T00:00:00').toLocaleDateString('en-GB', {day:'numeric', month:'long', year:'numeric'}) : "Visible this Season";
                    const fullDescription = event.type === 'moon' ? `${event.desc} Illuminated: <b>${(event.illumination * 100).toFixed(0)}%</b>. Age: <b>${event.age.toFixed(1)} days</b>.` : event.description;
                    const equipmentIconHTML = `<span class="text-2xl night-mode-subdued-icon">${getEquipmentIcon(event.minEquipment)}</span>`;
                    
                    let detailsHTML = `
                        <div class="flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-clock" viewBox="0 0 16 16"><path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/><path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"/></svg>
                            <span>Best viewing: <span class="text-indigo-300">${event.peakTime}</span></span>
                        </div>
                        <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-compass" viewBox="0 0 16 16"><path d="M8 16.016a7.5 7.5 0 0 0 1.962-14.74A1 1 0 0 0 9 0H7a1 1 0 0 0-.962 1.276A7.5 7.5 0 0 0 8 16.016zm6.5-7.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z"/><path d="m6.94 7.44 4.95-2.83-2.83 4.95-4.949 2.83 2.828-4.95z"/></svg>
                            <span>Direction: <span class="text-indigo-300">${event.direction}</span></span>
                        </div>
                    `;


                    if(event.riseTime) {
                        detailsHTML += `
                            <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-arrow-up-circle" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z"/></svg>
                                <span>Rise: <span class="text-indigo-300">${event.riseTime} (${event.riseDirection})</span></span>
                            </div>
                            <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-arrow-down-circle" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z"/></svg>
                                <span>Set: <span class="text-indigo-300">${event.setTime} (${event.setDirection})</span></span>
                            </div>
                        `;
                    }


                    card.innerHTML = `
                        <div class="w-full h-40 flex items-center justify-center bg-gray-800/50 p-4">${getEventIconSVG(event.type, event.name, event)}</div>
                        <div class="p-4">
                            <div class="flex justify-between items-start">
                                <div><h3 class="text-xl font-bold text-white">${event.name}</h3><p class="text-sm text-indigo-300">${dateLabel}</p></div>
                                <div class="text-center bg-gray-800 p-2 rounded-md">${equipmentIconHTML}<p class="text-xs capitalize font-semibold">${event.minEquipment.replace('_', ' ')}</p></div>
                            </div>
                            <p class="text-gray-300 mt-3 text-sm">${fullDescription}</p>
                            <div class="mt-4 pt-3 border-t border-gray-600 text-xs text-gray-400 font-medium space-y-2">
                                ${detailsHTML}
                            </div>
                            ${recommendation}
                        </div>`;
                    eventList.appendChild(card);
                });
            }


            function setNightMode(mode) {
                userConfiguration.nightMode = mode;
                mainContainer.classList.remove('night-mode-red', 'night-mode-green');
                if (mode !== 'off') { mainContainer.classList.add(`night-mode-${mode}`); }
                renderEvents();
            }
            
            function renderEyepieceTags() {
                eyepieceList.innerHTML = '';
                userConfiguration.telescope.eyepieces.sort((a,b) => b-a).forEach(ep => {
                    const tag = document.createElement('div');
                    tag.className = 'eyepiece-tag bg-indigo-500 text-white text-sm font-semibold px-2 py-1 rounded-md flex items-center gap-2';
                    tag.innerHTML = `<span>${ep}mm</span><button data-value="${ep}" class="remove-eyepiece text-indigo-200 hover:text-white">&times;</button>`;
                    eyepieceList.appendChild(tag);
                });
            }


            function updateModalInputs() {
                const { aperture, focalLength, eyepieces, filters, barlows } = userConfiguration.telescope;
                apertureValue.textContent = `${aperture}mm`;
                focalLengthValue.textContent = `${focalLength}mm`;
                renderEyepieceTags();
                document.querySelectorAll('#filters input[type="checkbox"]').forEach(cb => { cb.checked = filters.includes(cb.value); });
                document.querySelectorAll('#barlows input[type="checkbox"]').forEach(cb => { cb.checked = barlows.includes(parseInt(cb.value)); });
            }




            // --- EVENT LISTENERS ---
            document.getElementById('night-mode-off').addEventListener('click', () => setNightMode('off'));
            document.getElementById('night-mode-red').addEventListener('click', () => setNightMode('red'));
            document.getElementById('night-mode-green').addEventListener('click', () => setNightMode('green'));
            bortleSelect.addEventListener('change', renderEvents);
            document.getElementById('seeing-select').addEventListener('change', renderEvents);
            document.getElementById('weather-select').addEventListener('change', renderEvents);
            datePicker.addEventListener('change', renderEvents);
            dateFilterMode.addEventListener('change', (e) => {
                if (e.target.value === 'day') {
                    datePickerContainer.style.display = 'block';
                } else {
                    datePickerContainer.style.display = 'none';
                }
                renderEvents();
            });
            equipmentForm.addEventListener('change', (e) => {
                userConfiguration.equipment = e.target.value;
                if (e.target.value === 'telescope') {
                    document.getElementById('telescope').checked = true;
                    updateModalInputs();
                    telescopeModal.classList.remove('hidden');
                } else { renderEvents(); }
            });
            changeLocationBtn.addEventListener('click', handleManualLocationChange);
            telescopeLabel.addEventListener('click', (e) => { e.preventDefault(); updateModalInputs(); telescopeModal.classList.remove('hidden') });
            closeModalBtn.addEventListener('click', () => telescopeModal.classList.add('hidden'));
            selectAllFiltersBtn.addEventListener('click', () => { document.querySelectorAll('#filters input[type="checkbox"]').forEach(cb => { cb.checked = true; }); });
            document.getElementById('aperture-plus').addEventListener('click', () => { userConfiguration.telescope.aperture = Math.min(500, userConfiguration.telescope.aperture + 10); updateModalInputs(); });
            document.getElementById('aperture-minus').addEventListener('click', () => { userConfiguration.telescope.aperture = Math.max(50, userConfiguration.telescope.aperture - 10); updateModalInputs(); });
            document.getElementById('focal-length-plus').addEventListener('click', () => { userConfiguration.telescope.focalLength = Math.min(3000, userConfiguration.telescope.focalLength + 50); updateModalInputs(); });
            document.getElementById('focal-length-minus').addEventListener('click', () => { userConfiguration.telescope.focalLength = Math.max(400, userConfiguration.telescope.focalLength - 50); updateModalInputs(); });
            addEyepieceBtn.addEventListener('click', () => {
                const val = parseInt(eyepieceInput.value);
                if (val >= 4 && val <= 35 && !userConfiguration.telescope.eyepieces.includes(val)) {
                    userConfiguration.telescope.eyepieces.push(val);
                    renderEyepieceTags();
                }
                eyepieceInput.value = '';
            });
            eyepieceList.addEventListener('click', (e) => {
                if (e.target.classList.contains('remove-eyepiece')) {
                    const valToRemove = parseInt(e.target.dataset.value);
                    userConfiguration.telescope.eyepieces = userConfiguration.telescope.eyepieces.filter(ep => ep !== valToRemove);
                    renderEyepieceTags();
                }
            });
            saveTelescopeBtn.addEventListener('click', () => {
                userConfiguration.telescope.filters = Array.from(document.querySelectorAll('#filters input:checked')).map(el => el.value);
                userConfiguration.telescope.barlows = Array.from(document.querySelectorAll('#barlows input:checked')).map(el => parseInt(el.value));
                userConfiguration.equipment = 'telescope';
                document.getElementById('telescope').checked = true;
                document.getElementById('telescope-label-text').innerHTML = `Telescope <span class="text-xs block text-indigo-300">(${userConfiguration.telescope.aperture}mm)</span>`;
                telescopeModal.classList.add('hidden');
                renderEvents();
            });
            
            // Initial render
            const today = new Date();
            const yyyy = today.getFullYear();
            const mm = String(today.getMonth() + 1).padStart(2, '0');
            const dd = String(today.getDate()).padStart(2, '0');
            datePicker.value = `${yyyy}-${mm}-${dd}`;


            if (userConfiguration.telescope) { document.getElementById('telescope-label-text').innerHTML = `Telescope <span class="text-xs block text-indigo-300">(${userConfiguration.telescope.aperture}mm)</span>`; }
            
            getLocation();
            renderEvents();
        });
    </script>
</body>
</html>